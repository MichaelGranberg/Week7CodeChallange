//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Week7CodeChallenge.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class sp6MichaelEntiesCompForm : DbContext
    {
        public sp6MichaelEntiesCompForm()
            : base("name=sp6MichaelEntiesCompForm")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CompContactForm> CompContactForms { get; set; }
    
        public virtual int CreateNewScore(string name, string game, Nullable<int> score)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var gameParameter = game != null ?
                new ObjectParameter("game", game) :
                new ObjectParameter("game", typeof(string));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("score", score) :
                new ObjectParameter("score", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateNewScore", nameParameter, gameParameter, scoreParameter);
        }
    
        public virtual int DeleteBloodBankByID(Nullable<int> bloodbankid)
        {
            var bloodbankidParameter = bloodbankid.HasValue ?
                new ObjectParameter("bloodbankid", bloodbankid) :
                new ObjectParameter("bloodbankid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBloodBankByID", bloodbankidParameter);
        }
    
        public virtual int DeleteDonorByID(Nullable<int> donorid)
        {
            var donoridParameter = donorid.HasValue ?
                new ObjectParameter("donorid", donorid) :
                new ObjectParameter("donorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDonorByID", donoridParameter);
        }
    
        public virtual int DeletePatientByID(Nullable<int> patientid)
        {
            var patientidParameter = patientid.HasValue ?
                new ObjectParameter("patientid", patientid) :
                new ObjectParameter("patientid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePatientByID", patientidParameter);
        }
    
        public virtual int DeleteScore(Nullable<int> highscoreid)
        {
            var highscoreidParameter = highscoreid.HasValue ?
                new ObjectParameter("highscoreid", highscoreid) :
                new ObjectParameter("highscoreid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteScore", highscoreidParameter);
        }
    
        public virtual ObjectResult<GetBloodBankByID_Result> GetBloodBankByID(Nullable<int> bloodbankid)
        {
            var bloodbankidParameter = bloodbankid.HasValue ?
                new ObjectParameter("bloodbankid", bloodbankid) :
                new ObjectParameter("bloodbankid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBloodBankByID_Result>("GetBloodBankByID", bloodbankidParameter);
        }
    
        public virtual ObjectResult<GetDonorByID_Result> GetDonorByID(Nullable<int> donorid)
        {
            var donoridParameter = donorid.HasValue ?
                new ObjectParameter("donorid", donorid) :
                new ObjectParameter("donorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDonorByID_Result>("GetDonorByID", donoridParameter);
        }
    
        public virtual ObjectResult<string> GetDonorByPatientID(Nullable<int> patientid)
        {
            var patientidParameter = patientid.HasValue ?
                new ObjectParameter("patientid", patientid) :
                new ObjectParameter("patientid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetDonorByPatientID", patientidParameter);
        }
    
        public virtual ObjectResult<GetPatientByID_Result> GetPatientByID(Nullable<int> patientid)
        {
            var patientidParameter = patientid.HasValue ?
                new ObjectParameter("patientid", patientid) :
                new ObjectParameter("patientid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientByID_Result>("GetPatientByID", patientidParameter);
        }
    
        public virtual int GetScoreByID(Nullable<int> highscoreid)
        {
            var highscoreidParameter = highscoreid.HasValue ?
                new ObjectParameter("highscoreid", highscoreid) :
                new ObjectParameter("highscoreid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetScoreByID", highscoreidParameter);
        }
    
        public virtual int InsertBloodBank(string name, string bankaddress, string bankcontactnumber)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var bankaddressParameter = bankaddress != null ?
                new ObjectParameter("bankaddress", bankaddress) :
                new ObjectParameter("bankaddress", typeof(string));
    
            var bankcontactnumberParameter = bankcontactnumber != null ?
                new ObjectParameter("bankcontactnumber", bankcontactnumber) :
                new ObjectParameter("bankcontactnumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBloodBank", nameParameter, bankaddressParameter, bankcontactnumberParameter);
        }
    
        public virtual int InsertDonor(string name, string bloodtype)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var bloodtypeParameter = bloodtype != null ?
                new ObjectParameter("bloodtype", bloodtype) :
                new ObjectParameter("bloodtype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDonor", nameParameter, bloodtypeParameter);
        }
    
        public virtual int InsertPatient(string name, string bloodtype)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var bloodtypeParameter = bloodtype != null ?
                new ObjectParameter("bloodtype", bloodtype) :
                new ObjectParameter("bloodtype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPatient", nameParameter, bloodtypeParameter);
        }
    
        public virtual int ModifyName(string gamename)
        {
            var gamenameParameter = gamename != null ?
                new ObjectParameter("gamename", gamename) :
                new ObjectParameter("gamename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyName", gamenameParameter);
        }
    
        public virtual int UpdateBloodBank(Nullable<int> bloodbankid, string name, string bankaddress, string bankcontactnumber)
        {
            var bloodbankidParameter = bloodbankid.HasValue ?
                new ObjectParameter("bloodbankid", bloodbankid) :
                new ObjectParameter("bloodbankid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var bankaddressParameter = bankaddress != null ?
                new ObjectParameter("bankaddress", bankaddress) :
                new ObjectParameter("bankaddress", typeof(string));
    
            var bankcontactnumberParameter = bankcontactnumber != null ?
                new ObjectParameter("bankcontactnumber", bankcontactnumber) :
                new ObjectParameter("bankcontactnumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBloodBank", bloodbankidParameter, nameParameter, bankaddressParameter, bankcontactnumberParameter);
        }
    
        public virtual int UpdateDonor(Nullable<int> donorid, string name, string bloodtype)
        {
            var donoridParameter = donorid.HasValue ?
                new ObjectParameter("donorid", donorid) :
                new ObjectParameter("donorid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var bloodtypeParameter = bloodtype != null ?
                new ObjectParameter("bloodtype", bloodtype) :
                new ObjectParameter("bloodtype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDonor", donoridParameter, nameParameter, bloodtypeParameter);
        }
    
        public virtual int UpdatePatient(Nullable<int> patientid, string name, string bloodtype)
        {
            var patientidParameter = patientid.HasValue ?
                new ObjectParameter("patientid", patientid) :
                new ObjectParameter("patientid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var bloodtypeParameter = bloodtype != null ?
                new ObjectParameter("bloodtype", bloodtype) :
                new ObjectParameter("bloodtype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatient", patientidParameter, nameParameter, bloodtypeParameter);
        }
    
        public virtual int UpdateScore(Nullable<int> highscoreid, Nullable<int> newscore)
        {
            var highscoreidParameter = highscoreid.HasValue ?
                new ObjectParameter("highscoreid", highscoreid) :
                new ObjectParameter("highscoreid", typeof(int));
    
            var newscoreParameter = newscore.HasValue ?
                new ObjectParameter("newscore", newscore) :
                new ObjectParameter("newscore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateScore", highscoreidParameter, newscoreParameter);
        }
    }
}
